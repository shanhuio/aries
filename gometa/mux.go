package gometa

import (
	"net/http"
	"path"

	"shanhu.io/aries"
)

// IsGoGetRequest checks if an incoming request is generated by "go get"
func IsGoGetRequest(req *http.Request) bool {
	query := req.URL.Query()
	_, ok := query["go-get"]
	return ok
}

// NewGitMux creates an HTTP mux which handles go get requests
// for repos under a particular domain.
func NewGitMux(domain string, repos map[string]string) *aries.Mux {
	m := aries.NewMux()

	for repo, vcsRoot := range repos {
		r := NewGitRepo(path.Join(domain, repo), vcsRoot)
		m.Dir(path.Join("/", repo), r.Serve)
	}

	return m
}

// NewGitHubMux creates an HTTP mux which handles go get requests
// for repos under a particular domain that maps to a particular
// GitHub user or organization account.
func NewGitHubMux(domain, user string, repos []string) *aries.Mux {
	m := make(map[string]string)
	for _, repo := range repos {
		m[repo] = "https://" + path.Join("github.com", user, repo)
	}
	return NewGitMux(domain, m)
}

// ServeGoGet will serve the request if it contains "go-get" in the query.
// It returns true when it is served, and false if it is not.
func ServeGoGet(mux *aries.Mux, c *aries.C) error {
	query := c.Req.URL.Query()
	if _, ok := query["go-get"]; !ok {
		return aries.Miss
	}

	if err := mux.Serve(c); err != aries.Miss {
		return err
	}
	return aries.NotFound
}
